module raylib;
import std::collections::object;

// Macros
macro rad2deg(x) {
  return x * RAD2DEG;
}
macro deg2rad(x) {
  return x * DEG2RAD;
}

// Type definitions
def Color = char[<4>];
def Vector2 = float[<2>];
def Vector3 = float[<3>];
def Vector4 = float[<4>];
def Quaternion = Vector4;
def Texture2D = Texture;
def TextureCubemap = Texture;
def RenderTexture2D = RenderTexture;
def Camera = Camera3D;
def TraceLogCallback = fn void (int logLevel, char *text, args...);
def LoadFileDataCallback = fn char *(char *fileName, int *dataSize);
def SaveFileDataCallback = fn bool (char *fileName, void *data, int dataSize);
def LoadFileTextCallback = fn char *(char *fileName);
def SaveFileTextCallback = fn bool (char *fileName, char *text);
def AudioCallback = fn void (void *bufferData, uint frames);

// Structs
struct Matrix {
  float m0, m4, m8, m12;
  float m1, m5, m9, m13;
  float m2, m6, m10, m14;
  float m3, m7, m11, m15;
}

struct Rectangle {
  float x;
  float y;
  float width;
  float height;
}

struct Image {
  void *data;
  int width;
  int height;
  int mipmaps;
  int format;
}

struct Texture {
  uint id;
  int width;
  int height;
  int mipmaps;
  int format;
}

struct RenderTexture {
  uint id;
  Texture texture;
  Texture depth;
}

struct NPatchInfo {
  Rectangle source;
  int left;
  int top;
  int right;
  int bottom;
  int layout;
}

struct GlyphInfo {
  int value;
  int offsetX;
  int offsetY;
  int advanceX;
  Image image;
}

struct Font {
  int baseSize;
  int glyphCount;
  int glyphPadding;
  Texture2D texture;
  Rectangle *recs;
  GlyphInfo *glyphs;
}

struct Camera3D {
  Vector3 position;
  Vector3 target;
  Vector3 up;
  float fovy;
  int projection;
}

struct Camera2D {
  Vector2 offset;
  Vector2 target;
  float rotation;
  float zoom;
}

struct Mesh {
  int vertexCount;
  int triangleCount;
  float *vertices;
  float *texcoords;
  float *texcoords2;
  float *normals;
  float *tangents;
  char *colors;
  ushort *indices;
  float *animVertices;
  float *animNormals;
  char *boneIds;
  float *boneWeights;
  uint vaoId;
  uint *vboId;
}

struct Shader {
  uint id;
  int *locs;
}

struct MaterialMap {
  Texture2D texture;
  Color color;
  float value;
}

struct Material {
  Shader shader;
  MaterialMap *maps;
  float[4] params;
}

struct Transform {
  Vector3 translation;
  Quaternion rotation;
  Vector3 scale;
}

struct BoneInfo {
  char[32] name;
  int parent;
}

struct Model {
  Matrix transform;
  int meshCount;
  int materialCount;
  Mesh *meshes;
  Material *materials;
  int boneCount;
  BoneInfo *bones;
  Transform *bindPose;
}

struct ModelAnimation {
  int boneCount;
  int frameCount;
  BoneInfo *bones;
  Transform **framePoses;
  char[32] name;
}

struct Ray {
  Vector3 position;
  Vector3 direction;
}

struct RayCollision {
  bool hit;
  float distance;
  Vector3 point;
  Vector3 normal;
}

struct BoundingBox {
  Vector3 min;
  Vector3 max;
}

struct Wave {
  uint frameCount;
  uint sampleRate;
  uint sampleSize;
  uint channels;
  void *data;
}

distinct AudioBufferRef = void*;
distinct AudioProcessorRef = void*;
struct AudioStream {
  AudioBufferRef *buffer;
  AudioProcessorRef *processor;
  uint sampleRate;
  uint sampleSize;
  uint channels;
}

struct Sound {
  AudioStream stream;
  uint frameCount;
}

struct Music {
  AudioStream stream;
  uint frameCount;
  bool looping;
  int ctxType;
  void *ctxData;
}

struct VrDeviceInfo {
  int hResolution;
  int vResolution;
  float hScreenSize;
  float vScreenSize;
  float eyeToScreenDistance;
  float lensSeparationDistance;
  float interpupillaryDistance;
  float[4] lensDistortionValues;
  float[4] chromaAbCorrection;
}

struct VrStereoConfig {
  Matrix[2] projection;
  Matrix[2] viewOffset;
  float[2] leftLensCenter;
  float[2] rightLensCenter;
  float[2] leftScreenCenter;
  float[2] rightScreenCenter;
  float[2] scale;
  float[2] scaleIn;
}

struct FilePathList {
  uint capacity;
  uint count;
  char **paths;
}

struct AutomationEvent {
  uint frame;
  uint type;
  int[4] params;
}

struct AutomationEventList {
  uint capacity;
  uint count;
  AutomationEvent *events;
}

// Enums
enum TraceLogLevel : int {
  LOG_ALL,
  LOG_TRACE,
  LOG_DEBUG,
  LOG_INFO,
  LOG_WARNING,
  LOG_ERROR,
  LOG_FATAL,
  LOG_NONE,
}
//$assert((int)TraceLogLevel.LOG_ALL == 0);

enum MouseButton : int {
  MOUSE_BUTTON_LEFT,
  MOUSE_BUTTON_RIGHT,
  MOUSE_BUTTON_MIDDLE,
  MOUSE_BUTTON_SIDE,
  MOUSE_BUTTON_EXTRA,
  MOUSE_BUTTON_FORWARD,
  MOUSE_BUTTON_BACK,
}
//$assert((int)MouseButton.MOUSE_BUTTON_LEFT == 0);

enum MouseCursor : int {
  MOUSE_CURSOR_DEFAULT,
  MOUSE_CURSOR_ARROW,
  MOUSE_CURSOR_IBEAM,
  MOUSE_CURSOR_CROSSHAIR,
  MOUSE_CURSOR_POINTING_HAND,
  MOUSE_CURSOR_RESIZE_EW,
  MOUSE_CURSOR_RESIZE_NS,
  MOUSE_CURSOR_RESIZE_NWSE,
  MOUSE_CURSOR_RESIZE_NESW,
  MOUSE_CURSOR_RESIZE_ALL,
  MOUSE_CURSOR_NOT_ALLOWED,
}
//$assert((int)MouseCursor.MOUSE_CURSOR_DEFAULT == 0);

enum GamepadButton : int {
  GAMEPAD_BUTTON_UNKNOWN,
  GAMEPAD_BUTTON_LEFT_FACE_UP,
  GAMEPAD_BUTTON_LEFT_FACE_RIGHT,
  GAMEPAD_BUTTON_LEFT_FACE_DOWN,
  GAMEPAD_BUTTON_LEFT_FACE_LEFT,
  GAMEPAD_BUTTON_RIGHT_FACE_UP,
  GAMEPAD_BUTTON_RIGHT_FACE_RIGHT,
  GAMEPAD_BUTTON_RIGHT_FACE_DOWN,
  GAMEPAD_BUTTON_RIGHT_FACE_LEFT,
  GAMEPAD_BUTTON_LEFT_TRIGGER_1,
  GAMEPAD_BUTTON_LEFT_TRIGGER_2,
  GAMEPAD_BUTTON_RIGHT_TRIGGER_1,
  GAMEPAD_BUTTON_RIGHT_TRIGGER_2,
  GAMEPAD_BUTTON_MIDDLE_LEFT,
  GAMEPAD_BUTTON_MIDDLE,
  GAMEPAD_BUTTON_MIDDLE_RIGHT,
  GAMEPAD_BUTTON_LEFT_THUMB,
  GAMEPAD_BUTTON_RIGHT_THUMB,
}
//$assert((int)GamepadButton.GAMEPAD_BUTTON_UNKNOWN == 0);

enum GamepadAxis : int {
  GAMEPAD_AXIS_LEFT_X,
  GAMEPAD_AXIS_LEFT_Y,
  GAMEPAD_AXIS_RIGHT_X,
  GAMEPAD_AXIS_RIGHT_Y,
  GAMEPAD_AXIS_LEFT_TRIGGER,
  GAMEPAD_AXIS_RIGHT_TRIGGER,
}
//$assert((int)GamepadAxis.GAMEPAD_AXIS_LEFT_X == 0);

enum MaterialMapIndex : int {
  MATERIAL_MAP_ALBEDO,
  MATERIAL_MAP_METALNESS,
  MATERIAL_MAP_NORMAL,
  MATERIAL_MAP_ROUGHNESS,
  MATERIAL_MAP_OCCLUSION,
  MATERIAL_MAP_EMISSION,
  MATERIAL_MAP_HEIGHT,
  MATERIAL_MAP_CUBEMAP,
  MATERIAL_MAP_IRRADIANCE,
  MATERIAL_MAP_PREFILTER,
  MATERIAL_MAP_BRDF,
}
//$assert((int)MaterialMapIndex.MATERIAL_MAP_ALBEDO == 0);
const int MATERIAL_MAP_DIFFUSE = (int)MaterialMapIndex.MATERIAL_MAP_ALBEDO;
const int MATERIAL_MAP_SPECULAR = (int)MaterialMapIndex.MATERIAL_MAP_METALNESS;

enum ShaderLocationIndex : int {
  SHADER_LOC_VERTEX_POSITION,
  SHADER_LOC_VERTEX_TEXCOORD01,
  SHADER_LOC_VERTEX_TEXCOORD02,
  SHADER_LOC_VERTEX_NORMAL,
  SHADER_LOC_VERTEX_TANGENT,
  SHADER_LOC_VERTEX_COLOR,
  SHADER_LOC_MATRIX_MVP,
  SHADER_LOC_MATRIX_VIEW,
  SHADER_LOC_MATRIX_PROJECTION,
  SHADER_LOC_MATRIX_MODEL,
  SHADER_LOC_MATRIX_NORMAL,
  SHADER_LOC_VECTOR_VIEW,
  SHADER_LOC_COLOR_DIFFUSE,
  SHADER_LOC_COLOR_SPECULAR,
  SHADER_LOC_COLOR_AMBIENT,
  SHADER_LOC_MAP_ALBEDO,
  SHADER_LOC_MAP_METALNESS,
  SHADER_LOC_MAP_NORMAL,
  SHADER_LOC_MAP_ROUGHNESS,
  SHADER_LOC_MAP_OCCLUSION,
  SHADER_LOC_MAP_EMISSION,
  SHADER_LOC_MAP_HEIGHT,
  SHADER_LOC_MAP_CUBEMAP,
  SHADER_LOC_MAP_IRRADIANCE,
  SHADER_LOC_MAP_PREFILTER,
  SHADER_LOC_MAP_BRDF,
}
//$assert((int)ShaderLocationIndex.SHADER_LOC_VERTEX_POSITION == 0);
const int SHADER_LOC_MAP_DIFFUSE = (int)ShaderLocationIndex.SHADER_LOC_MAP_ALBEDO;
const int SHADER_LOC_MAP_SPECULAR = (int)ShaderLocationIndex.SHADER_LOC_MAP_METALNESS;

enum ShaderUniformDataType : int {
  SHADER_UNIFORM_FLOAT,
  SHADER_UNIFORM_VEC2,
  SHADER_UNIFORM_VEC3,
  SHADER_UNIFORM_VEC4,
  SHADER_UNIFORM_INT,
  SHADER_UNIFORM_IVEC2,
  SHADER_UNIFORM_IVEC3,
  SHADER_UNIFORM_IVEC4,
  SHADER_UNIFORM_SAMPLER2D,
}

enum ShaderAttributeDataType : int {
  SHADER_ATTRIB_FLOAT,
  SHADER_ATTRIB_VEC2,
  SHADER_ATTRIB_VEC3,
  SHADER_ATTRIB_VEC4,
}
//$assert((int)ShaderAttributeDataType.SHADER_ATTRIB_FLOAT == 0);

enum PixelFormat : int {
  UNUSED,
  PIXELFORMAT_UNCOMPRESSED_GRAYSCALE,
  PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,
  PIXELFORMAT_UNCOMPRESSED_R5G6B5,
  PIXELFORMAT_UNCOMPRESSED_R8G8B8,
  PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,
  PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,
  PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,
  PIXELFORMAT_UNCOMPRESSED_R32,
  PIXELFORMAT_UNCOMPRESSED_R32G32B32,
  PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,
  PIXELFORMAT_UNCOMPRESSED_R16,
  PIXELFORMAT_UNCOMPRESSED_R16G16B16,
  PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,
  PIXELFORMAT_COMPRESSED_DXT1_RGB,
  PIXELFORMAT_COMPRESSED_DXT1_RGBA,
  PIXELFORMAT_COMPRESSED_DXT3_RGBA,
  PIXELFORMAT_COMPRESSED_DXT5_RGBA,
  PIXELFORMAT_COMPRESSED_ETC1_RGB,
  PIXELFORMAT_COMPRESSED_ETC2_RGB,
  PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,
  PIXELFORMAT_COMPRESSED_PVRT_RGB,
  PIXELFORMAT_COMPRESSED_PVRT_RGBA,
  PIXELFORMAT_COMPRESSED_ASTC_4X4_RGBA,
  PIXELFORMAT_COMPRESSED_ASTC_8X8_RGBA,
}
$assert((int)PixelFormat.PIXELFORMAT_UNCOMPRESSED_GRAYSCALE == 1);

enum TextureFilter : int {
  TEXTURE_FILTER_POINT,
  TEXTURE_FILTER_BILINEAR,
  TEXTURE_FILTER_TRILINEAR,
  TEXTURE_FILTER_ANISOTROPIC_4X,
  TEXTURE_FILTER_ANISOTROPIC_8X,
  TEXTURE_FILTER_ANISOTROPIC_16X,
}
//$assert((int)TextureFilter.TEXTURE_FILTER_POINT == 0);

enum TextureWrap : int {
  TEXTURE_WRAP_REPEAT,
  TEXTURE_WRAP_CLAMP,
  TEXTURE_WRAP_MIRROR_REPEAT,
  TEXTURE_WRAP_MIRROR_CLAMP,
}
//$assert((int)TextureWrap.TEXTURE_WRAP_REPEAT == 0);

enum CubemapLayout : int {
  CUBEMAP_LAYOUT_AUTO_DETECT,
  CUBEMAP_LAYOUT_LINE_VERTICAL,
  CUBEMAP_LAYOUT_LINE_HORIZONTAL,
  CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR,
  CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE,
  CUBEMAP_LAYOUT_PANORAMA,
}
//$assert((int)CubemapLayout.CUBEMAP_LAYOUT_AUTO_DETECT == 0);

enum FontType : int {
    FONT_DEFAULT,
    FONT_BITMAP,
    FONT_SDF,
}
//$assert((int)FontType.FONT_DEFAULT == 0);

enum BlendMode : int {
  BLEND_ALPHA,
  BLEND_ADDITIVE,
  BLEND_MULTIPLIED,
  BLEND_ADD_COLORS,
  BLEND_SUBTRACT_COLORS,
  BLEND_ALPHA_PREMULTIPLY,
  BLEND_CUSTOM,
  BLEND_CUSTOM_SEPARATE,
}
//$assert((int)BlendMode.BLEND_ALPHA == 0);

enum CameraMode : int {
  CAMERA_CUSTOM,
  CAMERA_FREE,
  CAMERA_ORBITAL,
  CAMERA_FIRST_PERSON,
  CAMERA_THIRD_PERSON,
}
//$assert((int)CameraMode.CAMERA_CUSTOM == 0);

enum CameraProjection : int {
  CAMERA_PERSPECTIVE,
  CAMERA_ORTHOGRAPHIC,
}
//$assert((int)CameraProjection.CAMERA_PERSPECTIVE == 0);

enum NPatchLayout : int {
  NPATCH_NINE_PATCH,
  NPATCH_THREE_PATCH_VERTICAL,
  NPATCH_THREE_PATCH_HORIZONTAL,
}
//$assert((int)NPatchLayout.NPATCH_NINE_PATCH == 0);

// Constants
const KEY_NULL = 0;
const KEY_APOSTROPHE = 39;
const KEY_COMMA = 44;
const KEY_MINUS = 45;
const KEY_PERIOD = 46;
const KEY_SLASH = 47;
const KEY_ZERO = 48;
const KEY_ONE = 49;
const KEY_TWO = 50;
const KEY_THREE = 51;
const KEY_FOUR = 52;
const KEY_FIVE = 53;
const KEY_SIX = 54;
const KEY_SEVEN = 55;
const KEY_EIGHT = 56;
const KEY_NINE = 57;
const KEY_SEMICOLON = 59;
const KEY_EQUAL = 61;
const KEY_A = 65;
const KEY_B = 66;
const KEY_C = 67;
const KEY_D = 68;
const KEY_E = 69;
const KEY_F = 70;
const KEY_G = 71;
const KEY_H = 72;
const KEY_I = 73;
const KEY_J = 74;
const KEY_K = 75;
const KEY_L = 76;
const KEY_M = 77;
const KEY_N = 78;
const KEY_O = 79;
const KEY_P = 80;
const KEY_Q = 81;
const KEY_R = 82;
const KEY_S = 83;
const KEY_T = 84;
const KEY_U = 85;
const KEY_V = 86;
const KEY_W = 87;
const KEY_X = 88;
const KEY_Y = 89;
const KEY_Z = 90;
const KEY_LEFT_BRACKET = 91;
const KEY_BACKSLASH = 92;
const KEY_RIGHT_BRACKET = 93;
const KEY_GRAVE = 96;
const KEY_SPACE = 32;
const KEY_ESCAPE = 256;
const KEY_ENTER = 257;
const KEY_TAB = 258;
const KEY_BACKSPACE = 259;
const KEY_INSERT = 260;
const KEY_DELETE = 261;
const KEY_RIGHT = 262;
const KEY_LEFT = 263;
const KEY_DOWN = 264;
const KEY_UP = 265;
const KEY_PAGE_UP = 266;
const KEY_PAGE_DOWN = 267;
const KEY_HOME = 268;
const KEY_END = 269;
const KEY_CAPS_LOCK = 280;
const KEY_SCROLL_LOCK = 281;
const KEY_NUM_LOCK = 282;
const KEY_PRINT_SCREEN = 283;
const KEY_PAUSE = 284;
const KEY_F1 = 290;
const KEY_F2 = 291;
const KEY_F3 = 292;
const KEY_F4 = 293;
const KEY_F5 = 294;
const KEY_F6 = 295;
const KEY_F7 = 296;
const KEY_F8 = 297;
const KEY_F9 = 298;
const KEY_F10 = 299;
const KEY_F11 = 300;
const KEY_F12 = 301;
const KEY_LEFT_SHIFT = 340;
const KEY_LEFT_CONTROL = 341;
const KEY_LEFT_ALT = 342;
const KEY_LEFT_SUPER = 343;
const KEY_RIGHT_SHIFT = 344;
const KEY_RIGHT_CONTROL = 345;
const KEY_RIGHT_ALT = 346;
const KEY_RIGHT_SUPER = 347;
const KEY_KB_MENU = 348;
const KEY_KP_0 = 320;
const KEY_KP_1 = 321;
const KEY_KP_2 = 322;
const KEY_KP_3 = 323;
const KEY_KP_4 = 324;
const KEY_KP_5 = 325;
const KEY_KP_6 = 326;
const KEY_KP_7 = 327;
const KEY_KP_8 = 328;
const KEY_KP_9 = 329;
const KEY_KP_DECIMAL = 330;
const KEY_KP_DIVIDE = 331;
const KEY_KP_MULTIPLY = 332;
const KEY_KP_SUBTRACT = 333;
const KEY_KP_ADD = 334;
const KEY_KP_ENTER = 335;
const KEY_KP_EQUAL = 336;
const KEY_BACK = 4;
const KEY_MENU = 5;
const KEY_VOLUME_UP = 24;
const KEY_VOLUME_DOWN = 25;

const FLAG_VSYNC_HINT                 = 0x00000040;
const FLAG_FULLSCREEN_MODE            = 0x00000002;
const FLAG_WINDOW_RESIZABLE           = 0x00000004;
const FLAG_WINDOW_UNDECORATED         = 0x00000008;
const FLAG_WINDOW_HIDDEN              = 0x00000080;
const FLAG_WINDOW_MINIMIZED           = 0x00000200;
const FLAG_WINDOW_MAXIMIZED           = 0x00000400;
const FLAG_WINDOW_UNFOCUSED           = 0x00000800;
const FLAG_WINDOW_TOPMOST             = 0x00001000;
const FLAG_WINDOW_ALWAYS_RUN          = 0x00000100;
const FLAG_WINDOW_TRANSPARENT         = 0x00000010;
const FLAG_WINDOW_HIGHDPI             = 0x00002000;
const FLAG_WINDOW_MOUSE_PASSTHROUGH   = 0x00004000;
const FLAG_BORDERLESS_WINDOWED_MODE   = 0x00008000;
const FLAG_MSAA_4X_HINT               = 0x00000020;
const FLAG_INTERLACED_HINT            = 0x00010000;

const PI = 3.14159265358979323846f32;
const DEG2RAD = PI / 180.0f32;
const RAD2DEG = 180.0f32 / PI;

const LIGHTGRAY   = Color{ 200, 200, 200, 255 };
const GRAY        = Color{ 130, 130, 130, 255 };
const DARKGRAY    = Color{ 80, 80, 80, 255 };
const YELLOW      = Color{ 253, 249, 0, 255 };
const GOLD        = Color{ 255, 203, 0, 255 };
const ORANGE      = Color{ 255, 161, 0, 255 };
const PINK        = Color{ 255, 109, 194, 255 };
const RED         = Color{ 230, 41, 55, 255 };
const MAROON      = Color{ 190, 33, 55, 255 };
const GREEN       = Color{ 0, 228, 48, 255 };
const LIME        = Color{ 0, 158, 47, 255 };
const DARKGREEN   = Color{ 0, 117, 44, 255 };
const SKYBLUE     = Color{ 102, 191, 255, 255 };
const BLUE        = Color{ 0, 121, 241, 255 };
const DARKBLUE    = Color{ 0, 82, 172, 255 };
const PURPLE      = Color{ 200, 122, 255, 255 };
const VIOLET      = Color{ 135, 60, 190, 255 };
const DARKPURPLE  = Color{ 112, 31, 126, 255 };
const BEIGE       = Color{ 211, 176, 131, 255 };
const BROWN       = Color{ 127, 106, 79, 255 };
const DARKBROWN   = Color{ 76, 63, 47, 255 };
const WHITE       = Color{ 255, 255, 255, 255 };
const BLACK       = Color{ 0, 0, 0, 255 };
const BLANK       = Color{ 0, 0, 0, 0 };
const MAGENTA     = Color{ 255, 0, 255, 255 };
const RAYWHITE    = Color{ 245, 245, 245, 255 };

const GESTURE_NONE        = 0;
const GESTURE_TAP         = 1;
const GESTURE_DOUBLETAP   = 2;
const GESTURE_HOLD        = 4;
const GESTURE_DRAG        = 8;
const GESTURE_SWIPE_RIGHT = 16;
const GESTURE_SWIPE_LEFT  = 32;
const GESTURE_SWIPE_UP    = 64;
const GESTURE_SWIPE_DOWN  = 128;
const GESTURE_PINCH_IN    = 256;
const GESTURE_PINCH_OUT   = 512;


// Functions
fn void initWindow(int width, int height, char *title) @extern("InitWindow");
fn void closeWindow() @extern("CloseWindow");
fn bool windowShouldClose() @extern("WindowShouldClose");
fn bool isWindowReady() @extern("IsWindowReady");
fn bool isWindowFullscreen() @extern("IsWindowFullscreen");
fn bool isWindowHidden() @extern("IsWindowHidden");
fn bool isWindowMinimized() @extern("IsWindowMinimized");
fn bool isWindowMaximized() @extern("IsWindowMaximized");
fn bool isWindowFocused() @extern("IsWindowFocused");
fn bool isWindowResized() @extern("IsWindowResized");
fn bool isWindowState(uint flag) @extern("IsWindowState");
fn void setWindowState(uint flags) @extern("SetWindowState");
fn void clearWindowState(uint flags) @extern("ClearWindowState");
fn void toggleFullscreen() @extern("ToggleFullscreen");
fn void toggleBorderlessWindowed() @extern("ToggleBorderlessWindowed");
fn void maximizeWindow() @extern("MaximizeWindow");
fn void minimizeWindow() @extern("MinimizeWindow");
fn void restoreWindow() @extern("RestoreWindow");
fn void setWindowIcon(Image image) @extern("SetWindowIcon");
fn void setWindowIcons(Image *images, int count) @extern("SetWindowIcons");
fn void setWindowTitle(char *title) @extern("SetWindowTitle");
fn void setWindowPosition(int x, int y) @extern("SetWindowPosition");
fn void setWindowMonitor(int monitor) @extern("SetWindowMonitor");
fn void setWindowMinSize(int width, int height) @extern("SetWindowMinSize");
fn void setWindowMaxSize(int width, int height) @extern("SetWindowMaxSize");
fn void setWindowSize(int width, int height) @extern("SetWindowSize");
fn void setWindowOpacity(float opacity) @extern("SetWindowOpacity");
fn void setWindowFocused() @extern("SetWindowFocused");
fn void *getWindowHandle() @extern("GetWindowHandle");
fn int getScreenWidth() @extern("GetScreenWidth");
fn int getScreenHeight() @extern("GetScreenHeight");
fn int getRenderWidth() @extern("GetRenderWidth");
fn int getRenderHeight() @extern("GetRenderHeight");
fn int getMonitorCount() @extern("GetMonitorCount");
fn int getCurrentMonitor() @extern("GetCurrentMonitor");
fn Vector2 getMonitorPosition(int monitor) @extern("GetMonitorPosition");
fn int getMonitorWidth(int monitor) @extern("GetMonitorWidth");
fn int getMonitorHeight(int monitor) @extern("GetMonitorHeight");
fn int getMonitorPhysicalWidth(int monitor) @extern("GetMonitorPhysicalWidth");
fn int getMonitorPhysicalHeight(int monitor) @extern("GetMonitorPhysicalHeight");
fn int getMonitorRefreshRate(int monitor) @extern("GetMonitorRefreshRate");
fn Vector2 getWindowPosition() @extern("GetWindowPosition");
fn Vector2 getWindowScaleDPI() @extern("GetWindowScaleDPI");
fn char *getMonitorName(int monitor) @extern("GetMonitorName");
fn void setClipboardText(char *text) @extern("SetClipboardText");
fn char *getClipboardText() @extern("GetClipboardText");
fn void enableEventWaiting() @extern("EnableEventWaiting");
fn void disableEventWaiting() @extern("DisableEventWaiting");
fn void showCursor() @extern("ShowCursor");
fn void hideCursor() @extern("HideCursor");
fn bool isCursorHidden() @extern("IsCursorHidden");
fn void enableCursor() @extern("EnableCursor");
fn void disableCursor() @extern("DisableCursor");
fn bool isCursorOnScreen() @extern("IsCursorOnScreen");
fn void clearBackground(Color color) @extern("ClearBackground");
fn void beginDrawing() @extern("BeginDrawing");
fn void endDrawing() @extern("EndDrawing");
fn void beginMode2D(Camera2D camera) @extern("BeginMode2D");
fn void endMode2D() @extern("EndMode2D");
fn void beginMode3D(Camera3D camera) @extern("BeginMode3D");
fn void endMode3D() @extern("EndMode3D");
fn void beginTextureMode(RenderTexture2D target) @extern("BeginTextureMode");
fn void endTextureMode() @extern("EndTextureMode");
fn void beginShaderMode(Shader shader) @extern("BeginShaderMode");
fn void endShaderMode() @extern("EndShaderMode");
fn void beginBlendMode(int mode) @extern("BeginBlendMode");
fn void endBlendMode() @extern("EndBlendMode");
fn void beginScissorMode(int x, int y, int width, int height) @extern("BeginScissorMode");
fn void endScissorMode() @extern("EndScissorMode");
fn void beginVrStereoMode(VrStereoConfig config) @extern("BeginVrStereoMode");
fn void endVrStereoMode() @extern("EndVrStereoMode");
fn VrStereoConfig loadVrStereoConfig(VrDeviceInfo device) @extern("LoadVrStereoConfig");
fn void unloadVrStereoConfig(VrStereoConfig config) @extern("UnloadVrStereoConfig");
fn Shader loadShader(char *vsFileName, char *fsFileName) @extern("LoadShader");
fn Shader loadShaderFromMemory(char *vsCode, char *fsCode) @extern("LoadShaderFromMemory");
fn bool isShaderReady(Shader shader) @extern("IsShaderReady");
fn int getShaderLocation(Shader shader, char *uniformName) @extern("GetShaderLocation");
fn int getShaderLocationAttrib(Shader shader, char *attribName) @extern("GetShaderLocationAttrib");
fn void setShaderValue(Shader shader, int locIndex, void *value, int uniformType) @extern("SetShaderValue");
fn void setShaderValueV(Shader shader, int locIndex, void *value, int uniformType, int count) @extern("SetShaderValueV");
fn void setShaderValueMatrix(Shader shader, int locIndex, Matrix mat) @extern("SetShaderValueMatrix");
fn void setShaderValueTexture(Shader shader, int locIndex, Texture2D texture) @extern("SetShaderValueTexture");
fn void unloadShader(Shader shader) @extern("UnloadShader");
fn Ray getScreenToWorldRay(Vector2 position, Camera camera) @extern("GetScreenToWorldRay");
fn Ray getScreenToWorldRayEx(Vector2 position, Camera camera, int width, int height) @extern("GetScreenToWorldRayEx");
fn Vector2 getWorldToScreen(Vector3 position, Camera camera) @extern("GetWorldToScreen");
fn Vector2 getWorldToScreenEx(Vector3 position, Camera camera, int width, int height) @extern("GetWorldToScreenEx");
fn Vector2 getWorldToScreen2D(Vector2 position, Camera2D camera) @extern("GetWorldToScreen2D");
fn Vector2 getScreenToWorld2D(Vector2 position, Camera2D camera) @extern("GetScreenToWorld2D");
fn Matrix getCameraMatrix(Camera camera) @extern("GetCameraMatrix");
fn Matrix getCameraMatrix2D(Camera2D camera) @extern("GetCameraMatrix2D");
fn void setTargetFPS(int fps) @extern("SetTargetFPS");
fn float getFrameTime() @extern("GetFrameTime");
fn double getTime() @extern("GetTime");
fn int getFPS() @extern("GetFPS");
fn void swapScreenBuffer() @extern("SwapScreenBuffer");
fn void pollInputEvents() @extern("PollInputEvents");
fn void waitTime(double seconds) @extern("WaitTime");
fn void setRandomSeed(uint seed) @extern("SetRandomSeed");
fn int getRandomValue(int min, int max) @extern("GetRandomValue");
fn int *loadRandomSequence(uint count, int min, int max) @extern("LoadRandomSequence");
fn void unloadRandomSequence(int *sequence) @extern("UnloadRandomSequence");
fn void takeScreenshot(char *fileName) @extern("TakeScreenshot");
fn void setConfigFlags(uint flags) @extern("SetConfigFlags");
fn void openURL(char *url) @extern("OpenURL");
fn void traceLog(int logLevel, char *text, ...) @extern("TraceLog");
fn void setTraceLogLevel(int logLevel) @extern("SetTraceLogLevel");
fn void *memAlloc(uint size) @extern("MemAlloc");
fn void *memRealloc(void *ptr, uint size) @extern("MemRealloc");
fn void memFree(void *ptr) @extern("MemFree");
fn void setTraceLogCallback(TraceLogCallback callback) @extern("SetTraceLogCallback");
fn void setLoadFileDataCallback(LoadFileDataCallback callback) @extern("SetLoadFileDataCallback");
fn void setSaveFileDataCallback(SaveFileDataCallback callback) @extern("SetSaveFileDataCallback");
fn void setLoadFileTextCallback(LoadFileTextCallback callback) @extern("SetLoadFileTextCallback");
fn void setSaveFileTextCallback(SaveFileTextCallback callback) @extern("SetSaveFileTextCallback");
fn char *loadFileData(char *fileName, int *dataSize) @extern("LoadFileData");
fn void unloadFileData(char *data) @extern("UnloadFileData");
fn bool saveFileData(char *fileName, void *data, int dataSize) @extern("SaveFileData");
fn bool exportDataAsCode(char *data, int dataSize, char *fileName) @extern("ExportDataAsCode");
fn char *loadFileText(char *fileName) @extern("LoadFileText");
fn void unloadFileText(char *text) @extern("UnloadFileText");
fn bool saveFileText(char *fileName, char *text) @extern("SaveFileText");
fn bool fileExists(char *fileName) @extern("FileExists");
fn bool directoryExists(char *dirPath) @extern("DirectoryExists");
fn bool isFileExtension(char *fileName, char *ext) @extern("IsFileExtension");
fn int getFileLength(char *fileName) @extern("GetFileLength");
fn char *getFileExtension(char *fileName) @extern("GetFileExtension");
fn char *getFileName(char *filePath) @extern("GetFileName");
fn char *getFileNameWithoutExt(char *filePath) @extern("GetFileNameWithoutExt");
fn char *getDirectoryPath(char *filePath) @extern("GetDirectoryPath");
fn char *getPrevDirectoryPath(char *dirPath) @extern("GetPrevDirectoryPath");
fn char *getWorkingDirectory() @extern("GetWorkingDirectory");
fn char *getApplicationDirectory() @extern("GetApplicationDirectory");
fn bool changeDirectory(char *dir) @extern("ChangeDirectory");
fn bool isPathFile(char *path) @extern("IsPathFile");
fn bool isFileNameValid(char *fileName) @extern("IsFileNameValid");
fn FilePathList loadDirectoryFiles(char *dirPath) @extern("LoadDirectoryFiles");
fn FilePathList loadDirectoryFilesEx(char *basePath, char *filter, bool scanSubdirs) @extern("LoadDirectoryFilesEx");
fn void unloadDirectoryFiles(FilePathList files) @extern("UnloadDirectoryFiles");
fn bool isFileDropped() @extern("IsFileDropped");
fn FilePathList loadDroppedFiles() @extern("LoadDroppedFiles");
fn void unloadDroppedFiles(FilePathList files) @extern("UnloadDroppedFiles");
fn long getFileModTime(char *fileName) @extern("GetFileModTime");
fn char *compressData(char *data, int dataSize, int *compDataSize) @extern("CompressData");
fn char *decompressData(char *compData, int compDataSize, int *dataSize) @extern("DecompressData");
fn char *encodeDataBase64(char *data, int dataSize, int *outputSize) @extern("EncodeDataBase64");
fn char *decodeDataBase64(char *data, int *outputSize) @extern("DecodeDataBase64");
fn AutomationEventList loadAutomationEventList(char *fileName) @extern("LoadAutomationEventList");
fn void unloadAutomationEventList(AutomationEventList list) @extern("UnloadAutomationEventList");
fn bool exportAutomationEventList(AutomationEventList list, char *fileName) @extern("ExportAutomationEventList");
fn void setAutomationEventList(AutomationEventList *list) @extern("SetAutomationEventList");
fn void setAutomationEventBaseFrame(int frame) @extern("SetAutomationEventBaseFrame");
fn void startAutomationEventRecording() @extern("StartAutomationEventRecording");
fn void stopAutomationEventRecording() @extern("StopAutomationEventRecording");
fn void playAutomationEvent(AutomationEvent event) @extern("PlayAutomationEvent");
fn bool isKeyPressed(int key) @extern("IsKeyPressed");
fn bool isKeyPressedRepeat(int key) @extern("IsKeyPressedRepeat");
fn bool isKeyDown(int key) @extern("IsKeyDown");
fn bool isKeyReleased(int key) @extern("IsKeyReleased");
fn bool isKeyUp(int key) @extern("IsKeyUp");
fn int getKeyPressed() @extern("GetKeyPressed");
fn int getCharPressed() @extern("GetCharPressed");
fn void setExitKey(int key) @extern("SetExitKey");
fn bool isGamepadAvailable(int gamepad) @extern("IsGamepadAvailable");
fn char *getGamepadName(int gamepad) @extern("GetGamepadName");
fn bool isGamepadButtonPressed(int gamepad, int button) @extern("IsGamepadButtonPressed");
fn bool isGamepadButtonDown(int gamepad, int button) @extern("IsGamepadButtonDown");
fn bool isGamepadButtonReleased(int gamepad, int button) @extern("IsGamepadButtonReleased");
fn bool isGamepadButtonUp(int gamepad, int button) @extern("IsGamepadButtonUp");
fn int getGamepadButtonPressed() @extern("GetGamepadButtonPressed");
fn int getGamepadAxisCount(int gamepad) @extern("GetGamepadAxisCount");
fn float getGamepadAxisMovement(int gamepad, int axis) @extern("GetGamepadAxisMovement");
fn int setGamepadMappings(char *mappings) @extern("SetGamepadMappings");
fn void setGamepadVibration(int gamepad, float leftMotor, float rightMotor) @extern("SetGamepadVibration");
fn bool isMouseButtonPressed(int button) @extern("IsMouseButtonPressed");
fn bool isMouseButtonDown(int button) @extern("IsMouseButtonDown");
fn bool isMouseButtonReleased(int button) @extern("IsMouseButtonReleased");
fn bool isMouseButtonUp(int button) @extern("IsMouseButtonUp");
fn int getMouseX() @extern("GetMouseX");
fn int getMouseY() @extern("GetMouseY");
fn Vector2 getMousePosition() @extern("GetMousePosition");
fn Vector2 getMouseDelta() @extern("GetMouseDelta");
fn void setMousePosition(int x, int y) @extern("SetMousePosition");
fn void setMouseOffset(int offsetX, int offsetY) @extern("SetMouseOffset");
fn void setMouseScale(float scaleX, float scaleY) @extern("SetMouseScale");
fn float getMouseWheelMove() @extern("GetMouseWheelMove");
fn Vector2 getMouseWheelMoveV() @extern("GetMouseWheelMoveV");
fn void setMouseCursor(int cursor) @extern("SetMouseCursor");
fn int getTouchX() @extern("GetTouchX");
fn int getTouchY() @extern("GetTouchY");
fn Vector2 getTouchPosition(int index) @extern("GetTouchPosition");
fn int getTouchPointId(int index) @extern("GetTouchPointId");
fn int getTouchPointCount() @extern("GetTouchPointCount");
fn void setGesturesEnabled(uint flags) @extern("SetGesturesEnabled");
fn bool isGestureDetected(uint gesture) @extern("IsGestureDetected");
fn int getGestureDetected() @extern("GetGestureDetected");
fn float getGestureHoldDuration() @extern("GetGestureHoldDuration");
fn Vector2 getGestureDragVector() @extern("GetGestureDragVector");
fn float getGestureDragAngle() @extern("GetGestureDragAngle");
fn Vector2 getGesturePinchVector() @extern("GetGesturePinchVector");
fn float getGesturePinchAngle() @extern("GetGesturePinchAngle");
fn void updateCamera(Camera *camera, int mode) @extern("UpdateCamera");
fn void updateCameraPro(Camera *camera, Vector3 movement, Vector3 rotation, float zoom) @extern("UpdateCameraPro");
fn void setShapesTexture(Texture2D texture, Rectangle source) @extern("SetShapesTexture");
fn Texture2D getShapesTexture() @extern("GetShapesTexture");
fn Rectangle getShapesTextureRectangle() @extern("GetShapesTextureRectangle");
fn void drawPixel(int posX, int posY, Color color) @extern("DrawPixel");
fn void drawPixelV(Vector2 position, Color color) @extern("DrawPixelV");
fn void drawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color) @extern("DrawLine");
fn void drawLineV(Vector2 startPos, Vector2 endPos, Color color) @extern("DrawLineV");
fn void drawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color) @extern("DrawLineEx");
fn void drawLineStrip(Vector2 *points, int pointCount, Color color) @extern("DrawLineStrip");
fn void drawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color) @extern("DrawLineBezier");
fn void drawCircle(int centerX, int centerY, float radius, Color color) @extern("DrawCircle");
fn void drawCircleSector(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color) @extern("DrawCircleSector");
fn void drawCircleSectorLines(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color) @extern("DrawCircleSectorLines");
fn void drawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2) @extern("DrawCircleGradient");
fn void drawCircleV(Vector2 center, float radius, Color color) @extern("DrawCircleV");
fn void drawCircleLines(int centerX, int centerY, float radius, Color color) @extern("DrawCircleLines");
fn void drawCircleLinesV(Vector2 center, float radius, Color color) @extern("DrawCircleLinesV");
fn void drawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color) @extern("DrawEllipse");
fn void drawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color) @extern("DrawEllipseLines");
fn void drawRing(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color) @extern("DrawRing");
fn void drawRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color) @extern("DrawRingLines");
fn void drawRectangle(int posX, int posY, int width, int height, Color color) @extern("DrawRectangle");
fn void drawRectangleV(Vector2 position, Vector2 size, Color color) @extern("DrawRectangleV");
fn void drawRectangleRec(Rectangle rec, Color color) @extern("DrawRectangleRec");
fn void drawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color) @extern("DrawRectanglePro");
fn void drawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2) @extern("DrawRectangleGradientV");
fn void drawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2) @extern("DrawRectangleGradientH");
fn void drawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4) @extern("DrawRectangleGradientEx");
fn void drawRectangleLines(int posX, int posY, int width, int height, Color color) @extern("DrawRectangleLines");
fn void drawRectangleLinesEx(Rectangle rec, float lineThick, Color color) @extern("DrawRectangleLinesEx");
fn void drawRectangleRounded(Rectangle rec, float roundness, int segments, Color color) @extern("DrawRectangleRounded");
fn void drawRectangleRoundedLines(Rectangle rec, float roundness, int segments, Color color) @extern("DrawRectangleRoundedLines");
fn void drawRectangleRoundedLinesEx(Rectangle rec, float roundness, int segments, float lineThick, Color color) @extern("DrawRectangleRoundedLinesEx");
fn void drawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color) @extern("DrawTriangle");
fn void drawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color) @extern("DrawTriangleLines");
fn void drawTriangleFan(Vector2 *points, int pointCount, Color color) @extern("DrawTriangleFan");
fn void drawTriangleStrip(Vector2 *points, int pointCount, Color color) @extern("DrawTriangleStrip");
fn void drawPoly(Vector2 center, int sides, float radius, float rotation, Color color) @extern("DrawPoly");
fn void drawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color) @extern("DrawPolyLines");
fn void drawPolyLinesEx(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color) @extern("DrawPolyLinesEx");
fn void drawSplineLinear(Vector2 *points, int pointCount, float thick, Color color) @extern("DrawSplineLinear");
fn void drawSplineBasis(Vector2 *points, int pointCount, float thick, Color color) @extern("DrawSplineBasis");
fn void drawSplineCatmullRom(Vector2 *points, int pointCount, float thick, Color color) @extern("DrawSplineCatmullRom");
fn void drawSplineBezierQuadratic(Vector2 *points, int pointCount, float thick, Color color) @extern("DrawSplineBezierQuadratic");
fn void drawSplineBezierCubic(Vector2 *points, int pointCount, float thick, Color color) @extern("DrawSplineBezierCubic");
fn void drawSplineSegmentLinear(Vector2 p1, Vector2 p2, float thick, Color color) @extern("DrawSplineSegmentLinear");
fn void drawSplineSegmentBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color) @extern("DrawSplineSegmentBasis");
fn void drawSplineSegmentCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color) @extern("DrawSplineSegmentCatmullRom");
fn void drawSplineSegmentBezierQuadratic(Vector2 p1, Vector2 c2, Vector2 p3, float thick, Color color) @extern("DrawSplineSegmentBezierQuadratic");
fn void drawSplineSegmentBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, Color color) @extern("DrawSplineSegmentBezierCubic");
fn Vector2 getSplinePointLinear(Vector2 startPos, Vector2 endPos, float t) @extern("GetSplinePointLinear");
fn Vector2 getSplinePointBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t) @extern("GetSplinePointBasis");
fn Vector2 getSplinePointCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t) @extern("GetSplinePointCatmullRom");
fn Vector2 getSplinePointBezierQuad(Vector2 p1, Vector2 c2, Vector2 p3, float t) @extern("GetSplinePointBezierQuad");
fn Vector2 getSplinePointBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t) @extern("GetSplinePointBezierCubic");
fn bool checkCollisionRecs(Rectangle rec1, Rectangle rec2) @extern("CheckCollisionRecs");
fn bool checkCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2) @extern("CheckCollisionCircles");
fn bool checkCollisionCircleRec(Vector2 center, float radius, Rectangle rec) @extern("CheckCollisionCircleRec");
fn bool checkCollisionPointRec(Vector2 point, Rectangle rec) @extern("CheckCollisionPointRec");
fn bool checkCollisionPointCircle(Vector2 point, Vector2 center, float radius) @extern("CheckCollisionPointCircle");
fn bool checkCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3) @extern("CheckCollisionPointTriangle");
fn bool checkCollisionPointPoly(Vector2 point, Vector2 *points, int pointCount) @extern("CheckCollisionPointPoly");
fn bool checkCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint) @extern("CheckCollisionLines");
fn bool checkCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, int threshold) @extern("CheckCollisionPointLine");
fn bool checkCollisionCircleLine(Vector2 center, float radius, Vector2 p1, Vector2 p2) @extern("CheckCollisionCircleLine");
fn Rectangle getCollisionRec(Rectangle rec1, Rectangle rec2) @extern("GetCollisionRec");
fn Image loadImage(char *fileName) @extern("LoadImage");
fn Image loadImageRaw(char *fileName, int width, int height, int format, int headerSize) @extern("LoadImageRaw");
fn Image loadImageSvg(char *fileNameOrString, int width, int height) @extern("LoadImageSvg");
fn Image loadImageAnim(char *fileName, int *frames) @extern("LoadImageAnim");
fn Image loadImageAnimFromMemory(char *fileType, char *fileData, int dataSize, int *frames) @extern("LoadImageAnimFromMemory");
fn Image loadImageFromMemory(char *fileType, char *fileData, int dataSize) @extern("LoadImageFromMemory");
fn Image loadImageFromTexture(Texture2D texture) @extern("LoadImageFromTexture");
fn Image loadImageFromScreen() @extern("LoadImageFromScreen");
fn bool isImageReady(Image image) @extern("IsImageReady");
fn void unloadImage(Image image) @extern("UnloadImage");
fn bool exportImage(Image image, char *fileName) @extern("ExportImage");
fn char *exportImageToMemory(Image image, char *fileType, int *fileSize) @extern("ExportImageToMemory");
fn bool exportImageAsCode(Image image, char *fileName) @extern("ExportImageAsCode");
fn Image genImageColor(int width, int height, Color color) @extern("GenImageColor");
fn Image genImageGradientLinear(int width, int height, int direction, Color start, Color end) @extern("GenImageGradientLinear");
fn Image genImageGradientRadial(int width, int height, float density, Color inner, Color outer) @extern("GenImageGradientRadial");
fn Image genImageGradientSquare(int width, int height, float density, Color inner, Color outer) @extern("GenImageGradientSquare");
fn Image genImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2) @extern("GenImageChecked");
fn Image genImageWhiteNoise(int width, int height, float factor) @extern("GenImageWhiteNoise");
fn Image genImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale) @extern("GenImagePerlinNoise");
fn Image genImageCellular(int width, int height, int tileSize) @extern("GenImageCellular");
fn Image genImageText(int width, int height, char *text) @extern("GenImageText");
fn Image imageCopy(Image image) @extern("ImageCopy");
fn Image imageFromImage(Image image, Rectangle rec) @extern("ImageFromImage");
fn Image imageFromChannel(Image image, int selectedChannel) @extern("ImageFromChannel");
fn Image imageText(char *text, int fontSize, Color color) @extern("ImageText");
fn Image imageTextEx(Font font, char *text, float fontSize, float spacing, Color tint) @extern("ImageTextEx");
fn void imageFormat(Image *image, int newFormat) @extern("ImageFormat");
fn void imageToPOT(Image *image, Color fill) @extern("ImageToPOT");
fn void imageCrop(Image *image, Rectangle crop) @extern("ImageCrop");
fn void imageAlphaCrop(Image *image, float threshold) @extern("ImageAlphaCrop");
fn void imageAlphaClear(Image *image, Color color, float threshold) @extern("ImageAlphaClear");
fn void imageAlphaMask(Image *image, Image alphaMask) @extern("ImageAlphaMask");
fn void imageAlphaPremultiply(Image *image) @extern("ImageAlphaPremultiply");
fn void imageBlurGaussian(Image *image, int blurSize) @extern("ImageBlurGaussian");
fn void imageKernelConvolution(Image *image, float *kernel, int kernelSize) @extern("ImageKernelConvolution");
fn void imageResize(Image *image, int newWidth, int newHeight) @extern("ImageResize");
fn void imageResizeNN(Image *image, int newWidth,int newHeight) @extern("ImageResizeNN");
fn void imageResizeCanvas(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill) @extern("ImageResizeCanvas");
fn void imageMipmaps(Image *image) @extern("ImageMipmaps");
fn void imageDither(Image *image, int rBpp, int gBpp, int bBpp, int aBpp) @extern("ImageDither");
fn void imageFlipVertical(Image *image) @extern("ImageFlipVertical");
fn void imageFlipHorizontal(Image *image) @extern("ImageFlipHorizontal");
fn void imageRotate(Image *image, int degrees) @extern("ImageRotate");
fn void imageRotateCW(Image *image) @extern("ImageRotateCW");
fn void imageRotateCCW(Image *image) @extern("ImageRotateCCW");
fn void imageColorTint(Image *image, Color color) @extern("ImageColorTint");
fn void imageColorInvert(Image *image) @extern("ImageColorInvert");
fn void imageColorGrayscale(Image *image) @extern("ImageColorGrayscale");
fn void imageColorContrast(Image *image, float contrast) @extern("ImageColorContrast");
fn void imageColorBrightness(Image *image, int brightness) @extern("ImageColorBrightness");
fn void imageColorReplace(Image *image, Color color, Color replace) @extern("ImageColorReplace");
fn Color *loadImageColors(Image image) @extern("LoadImageColors");
fn Color *loadImagePalette(Image image, int maxPaletteSize, int *colorCount) @extern("LoadImagePalette");
fn void unloadImageColors(Color *colors) @extern("UnloadImageColors");
fn void unloadImagePalette(Color *colors) @extern("UnloadImagePalette");
fn Rectangle getImageAlphaBorder(Image image, float threshold) @extern("GetImageAlphaBorder");
fn Color getImageColor(Image image, int x, int y) @extern("GetImageColor");
fn void imageClearBackground(Image *dst, Color color) @extern("ImageClearBackground");
fn void imageDrawPixel(Image *dst, int posX, int posY, Color color) @extern("ImageDrawPixel");
fn void imageDrawPixelV(Image *dst, Vector2 position, Color color) @extern("ImageDrawPixelV");
fn void imageDrawLine(Image *dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color) @extern("ImageDrawLine");
fn void imageDrawLineV(Image *dst, Vector2 start, Vector2 end, Color color) @extern("ImageDrawLineV");
fn void imageDrawLineEx(Image *dst, Vector2 start, Vector2 end, int thick, Color color) @extern("ImageDrawLineEx");
fn void imageDrawCircle(Image *dst, int centerX, int centerY, int radius, Color color) @extern("ImageDrawCircle");
fn void imageDrawCircleV(Image *dst, Vector2 center, int radius, Color color) @extern("ImageDrawCircleV");
fn void imageDrawCircleLines(Image *dst, int centerX, int centerY, int radius, Color color) @extern("ImageDrawCircleLines");
fn void imageDrawCircleLinesV(Image *dst, Vector2 center, int radius, Color color) @extern("ImageDrawCircleLinesV");
fn void imageDrawRectangle(Image *dst, int posX, int posY, int width, int height, Color color) @extern("ImageDrawRectangle");
fn void imageDrawRectangleV(Image *dst, Vector2 position, Vector2 size, Color color) @extern("ImageDrawRectangleV");
fn void imageDrawRectangleRec(Image *dst, Rectangle rec, Color color) @extern("ImageDrawRectangleRec");
fn void imageDrawRectangleLines(Image *dst, Rectangle rec, int thick, Color color) @extern("ImageDrawRectangleLines");
fn void imageDrawTriangle(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color) @extern("ImageDrawTriangle");
fn void imageDrawTriangleEx(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color c1, Color c2, Color c3) @extern("ImageDrawTriangleEx");
fn void imageDrawTriangleLines(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color) @extern("ImageDrawTriangleLines");
fn void imageDrawTriangleFan(Image *dst, Vector2 *points, int pointCount, Color color) @extern("ImageDrawTriangleFan");
fn void imageDrawTriangleStrip(Image *dst, Vector2 *points, int pointCount, Color color) @extern("ImageDrawTriangleStrip");
fn void imageDraw(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint) @extern("ImageDraw");
fn void imageDrawText(Image *dst, char *text, int posX, int posY, int fontSize, Color color) @extern("ImageDrawText");
fn void imageDrawTextEx(Image *dst, Font font, char *text, Vector2 position, float fontSize, float spacing, Color tint) @extern("ImageDrawTextEx");
fn Texture2D loadTexture(char *fileName) @extern("LoadTexture");
fn Texture2D loadTextureFromImage(Image image) @extern("LoadTextureFromImage");
fn TextureCubemap loadTextureCubemap(Image image, int layout) @extern("LoadTextureCubemap");
fn RenderTexture2D loadRenderTexture(int width, int height) @extern("LoadRenderTexture");
fn bool isTextureReady(Texture2D texture) @extern("IsTextureReady");
fn void unloadTexture(Texture2D texture) @extern("UnloadTexture");
fn bool isRenderTextureReady(RenderTexture2D target) @extern("IsRenderTextureReady");
fn void unloadRenderTexture(RenderTexture2D target) @extern("UnloadRenderTexture");
fn void updateTexture(Texture2D texture, void *pixels) @extern("UpdateTexture");
fn void updateTextureRec(Texture2D texture, Rectangle rec, void *pixels) @extern("UpdateTextureRec");
fn void genTextureMipmaps(Texture2D *texture) @extern("GenTextureMipmaps");
fn void setTextureFilter(Texture2D texture, int filter) @extern("SetTextureFilter");
fn void setTextureWrap(Texture2D texture, int wrap) @extern("SetTextureWrap");
fn void drawTexture(Texture2D texture, int posX, int posY, Color tint) @extern("DrawTexture");
fn void drawTextureV(Texture2D texture, Vector2 position, Color tint) @extern("DrawTextureV");
fn void drawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint) @extern("DrawTextureEx");
fn void drawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint) @extern("DrawTextureRec");
fn void drawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint) @extern("DrawTexturePro");
fn void drawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint) @extern("DrawTextureNPatch");
fn bool colorIsEqual(Color col1, Color col2) @extern("ColorIsEqual");
fn Color fade(Color color, float alpha) @extern("Fade");
fn int colorToInt(Color color) @extern("ColorToInt");
fn Vector4 colorNormalize(Color color) @extern("ColorNormalize");
fn Color colorFromNormalized(Vector4 normalized) @extern("ColorFromNormalized");
fn Vector3 colorToHSV(Color color) @extern("ColorToHSV");
fn Color colorFromHSV(float hue, float saturation, float value) @extern("ColorFromHSV");
fn Color colorTint(Color color, Color tint) @extern("ColorTint");
fn Color colorBrightness(Color color, float factor) @extern("ColorBrightness");
fn Color colorContrast(Color color, float contrast) @extern("ColorContrast");
fn Color colorAlpha(Color color, float alpha) @extern("ColorAlpha");
fn Color colorAlphaBlend(Color dst, Color src, Color tint) @extern("ColorAlphaBlend");
fn Color getColor(uint hexValue) @extern("GetColor");
fn Color getPixelColor(void *srcPtr, int format) @extern("GetPixelColor");
fn void setPixelColor(void *dstPtr, Color color, int format) @extern("SetPixelColor");
fn int getPixelDataSize(int width, int height, int format) @extern("GetPixelDataSize");
fn Font getFontDefault() @extern("GetFontDefault");
fn Font loadFont(char *fileName) @extern("LoadFont");
fn Font loadFontEx(char *fileName, int fontSize, int *codepoints, int codepointCount) @extern("LoadFontEx");
fn Font loadFontFromImage(Image image, Color key, int firstChar) @extern("LoadFontFromImage");
fn Font loadFontFromMemory(char *fileType, char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount) @extern("LoadFontFromMemory");
fn bool isFontReady(Font font) @extern("IsFontReady");
fn GlyphInfo *loadFontData(char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount, int type) @extern("LoadFontData");
fn Image genImageFontAtlas(GlyphInfo *glyphs, Rectangle **glyphRecs, int glyphCount, int fontSize, int padding, int packMethod) @extern("GenImageFontAtlas");
fn void unloadFontData(GlyphInfo *glyphs, int glyphCount) @extern("UnloadFontData");
fn void unloadFont(Font font) @extern("UnloadFont");
fn bool exportFontAsCode(Font font, char *fileName) @extern("ExportFontAsCode");
fn void drawFPS(int posX, int posY) @extern("DrawFPS");
fn void drawText(char *text, int posX, int posY, int fontSize, Color color) @extern("DrawText");
fn void drawTextEx(Font font, char *text, Vector2 position, float fontSize, float spacing, Color tint) @extern("DrawTextEx");
fn void drawTextPro(Font font, char *text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint) @extern("DrawTextPro");
fn void drawTextCodepoint(Font font, int codepoint, Vector2 position, float fontSize, Color tint) @extern("DrawTextCodepoint");
fn void drawTextCodepoints(Font font, int *codepoints, int codepointCount, Vector2 position, float fontSize, float spacing, Color tint) @extern("DrawTextCodepoints");
fn void setTextLineSpacing(int spacing) @extern("SetTextLineSpacing");
fn int measureText(char *text, int fontSize) @extern("MeasureText");
fn Vector2 measureTextEx(Font font, char *text, float fontSize, float spacing) @extern("MeasureTextEx");
fn int getGlyphIndex(Font font, int codepoint) @extern("GetGlyphIndex");
fn GlyphInfo getGlyphInfo(Font font, int codepoint) @extern("GetGlyphInfo");
fn Rectangle getGlyphAtlasRec(Font font, int codepoint) @extern("GetGlyphAtlasRec");
fn char *loadUTF8(int *codepoints, int length) @extern("LoadUTF8");
fn void unloadUTF8(char *text) @extern("UnloadUTF8");
fn int *loadCodepoints(char *text, int *count) @extern("LoadCodepoints");
fn void unloadCodepoints(int *codepoints) @extern("UnloadCodepoints");
fn int getCodepointCount(char *text) @extern("GetCodepointCount");
fn int getCodepoint(char *text, int *codepointSize) @extern("GetCodepoint");
fn int getCodepointNext(char *text, int *codepointSize) @extern("GetCodepointNext");
fn int getCodepointPrevious(char *text, int *codepointSize) @extern("GetCodepointPrevious");
fn char *codepointToUTF8(int codepoint, int *utf8Size) @extern("CodepointToUTF8");
fn int textCopy(char *dst, char *src) @extern("TextCopy");
fn bool textIsEqual(char *text1, char *text2) @extern("TextIsEqual");
fn uint textLength(char *text) @extern("TextLength");
fn char *textFormat(char *text, ...) @extern("TextFormat");
fn char *textSubtext(char *text, int position, int length) @extern("TextSubtext");
fn char *textReplace(char *text, char *replace, char *by) @extern("TextReplace");
fn char *textInsert(char *text, char *insert, int position) @extern("TextInsert");
fn char *textJoin(char **textList, int count, char *delimiter) @extern("TextJoin");
fn char **textSplit(char *text, char delimiter, int *count) @extern("TextSplit");
fn void textAppend(char *text, char *append, int *position) @extern("TextAppend");
fn int textFindIndex(char *text, char *find) @extern("TextFindIndex");
fn char *textToUpper(char *text) @extern("TextToUpper");
fn char *textToLower(char *text) @extern("TextToLower");
fn char *textToPascal(char *text) @extern("TextToPascal");
fn char *textToSnake(char *text) @extern("TextToSnake");
fn char *textToCamel(char *text) @extern("TextToCamel");
fn int textToInteger(char *text) @extern("TextToInteger");
fn float textToFloat(char *text) @extern("TextToFloat");
fn void drawLine3D(Vector3 startPos, Vector3 endPos, Color color) @extern("DrawLine3D");
fn void drawPoint3D(Vector3 position, Color color) @extern("DrawPoint3D");
fn void drawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color) @extern("DrawCircle3D");
fn void drawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color) @extern("DrawTriangle3D");
fn void drawTriangleStrip3D(Vector3 *points, int pointCount, Color color) @extern("DrawTriangleStrip3D");
fn void drawCube(Vector3 position, float width, float height, float length, Color color) @extern("DrawCube");
fn void drawCubeV(Vector3 position, Vector3 size, Color color) @extern("DrawCubeV");
fn void drawCubeWires(Vector3 position, float width, float height, float length, Color color) @extern("DrawCubeWires");
fn void drawCubeWiresV(Vector3 position, Vector3 size, Color color) @extern("DrawCubeWiresV");
fn void drawSphere(Vector3 centerPos, float radius, Color color) @extern("DrawSphere");
fn void drawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color) @extern("DrawSphereEx");
fn void drawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color) @extern("DrawSphereWires");
fn void drawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color) @extern("DrawCylinder");
fn void drawCylinderEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color) @extern("DrawCylinderEx");
fn void drawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color) @extern("DrawCylinderWires");
fn void drawCylinderWiresEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color) @extern("DrawCylinderWiresEx");
fn void drawCapsule(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color) @extern("DrawCapsule");
fn void drawCapsuleWires(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color) @extern("DrawCapsuleWires");
fn void drawPlane(Vector3 centerPos, Vector2 size, Color color) @extern("DrawPlane");
fn void drawRay(Ray ray, Color color) @extern("DrawRay");
fn void drawGrid(int slices, float spacing) @extern("DrawGrid");
fn Model loadModel(char *fileName) @extern("LoadModel");
fn Model loadModelFromMesh(Mesh mesh) @extern("LoadModelFromMesh");
fn bool isModelReady(Model model) @extern("IsModelReady");
fn void unloadModel(Model model) @extern("UnloadModel");
fn BoundingBox getModelBoundingBox(Model model) @extern("GetModelBoundingBox");
fn void drawModel(Model model, Vector3 position, float scale, Color tint) @extern("DrawModel");
fn void drawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint) @extern("DrawModelEx");
fn void drawModelWires(Model model, Vector3 position, float scale, Color tint) @extern("DrawModelWires");
fn void drawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint) @extern("DrawModelWiresEx");
fn void drawBoundingBox(BoundingBox box, Color color) @extern("DrawBoundingBox");
fn void drawBillboard(Camera camera, Texture2D texture, Vector3 position, float scale, Color tint) @extern("DrawBillboard");
fn void drawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint) @extern("DrawBillboardRec");
fn void drawBillboardPro(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint) @extern("DrawBillboardPro");
fn void uploadMesh(Mesh *mesh, bool dynamic) @extern("UploadMesh");
fn void updateMeshBuffer(Mesh mesh, int index, void *data, int dataSize, int offset) @extern("UpdateMeshBuffer");
fn void unloadMesh(Mesh mesh) @extern("UnloadMesh");
fn void drawMesh(Mesh mesh, Material material, Matrix transform) @extern("DrawMesh");
fn void drawMeshInstanced(Mesh mesh, Material material, Matrix *transforms, int instances) @extern("DrawMeshInstanced");
fn BoundingBox getMeshBoundingBox(Mesh mesh) @extern("GetMeshBoundingBox");
fn void genMeshTangents(Mesh *mesh) @extern("GenMeshTangents");
fn bool exportMesh(Mesh mesh, char *fileName) @extern("ExportMesh");
fn bool exportMeshAsCode(Mesh mesh, char *fileName) @extern("ExportMeshAsCode");
fn Mesh genMeshPoly(int sides, float radius) @extern("GenMeshPoly");
fn Mesh genMeshPlane(float width, float length, int resX, int resZ) @extern("GenMeshPlane");
fn Mesh genMeshCube(float width, float height, float length) @extern("GenMeshCube");
fn Mesh genMeshSphere(float radius, int rings, int slices) @extern("GenMeshSphere");
fn Mesh genMeshHemiSphere(float radius, int rings, int slices) @extern("GenMeshHemiSphere");
fn Mesh genMeshCylinder(float radius, float height, int slices) @extern("GenMeshCylinder");
fn Mesh genMeshCone(float radius, float height, int slices) @extern("GenMeshCone");
fn Mesh genMeshTorus(float radius, float size, int radSeg, int sides) @extern("GenMeshTorus");
fn Mesh genMeshKnot(float radius, float size, int radSeg, int sides) @extern("GenMeshKnot");
fn Mesh genMeshHeightmap(Image heightmap, Vector3 size) @extern("GenMeshHeightmap");
fn Mesh genMeshCubicmap(Image cubicmap, Vector3 cubeSize) @extern("GenMeshCubicmap");
fn Material *loadMaterials(char *fileName, int *materialCount) @extern("LoadMaterials");
fn Material loadMaterialDefault() @extern("LoadMaterialDefault");
fn bool isMaterialReady(Material material) @extern("IsMaterialReady");
fn void unloadMaterial(Material material) @extern("UnloadMaterial");
fn void setMaterialTexture(Material *material, int mapType, Texture2D texture) @extern("SetMaterialTexture");
fn void setModelMeshMaterial(Model *model, int meshId, int materialId) @extern("SetModelMeshMaterial");
fn ModelAnimation *loadModelAnimations(char *fileName, int *animCount) @extern("LoadModelAnimations");
fn void updateModelAnimation(Model model, ModelAnimation anim, int frame) @extern("UpdateModelAnimation");
fn void unloadModelAnimation(ModelAnimation anim) @extern("UnloadModelAnimation");
fn void unloadModelAnimations(ModelAnimation *animations, int animCount) @extern("UnloadModelAnimations");
fn bool isModelAnimationValid(Model model, ModelAnimation anim) @extern("IsModelAnimationValid");
fn bool checkCollisionSpheres(Vector3 center1, float radius1, Vector3 center2, float radius2) @extern("CheckCollisionSpheres");
fn bool checkCollisionBoxes(BoundingBox box1, BoundingBox box2) @extern("CheckCollisionBoxes");
fn bool checkCollisionBoxSphere(BoundingBox box, Vector3 center, float radius) @extern("CheckCollisionBoxSphere");
fn RayCollision getRayCollisionSphere(Ray ray, Vector3 center, float radius) @extern("GetRayCollisionSphere");
fn RayCollision getRayCollisionBox(Ray ray, BoundingBox box) @extern("GetRayCollisionBox");
fn RayCollision getRayCollisionMesh(Ray ray, Mesh mesh, Matrix transform) @extern("GetRayCollisionMesh");
fn RayCollision getRayCollisionTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3) @extern("GetRayCollisionTriangle");
fn RayCollision getRayCollisionQuad(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4) @extern("GetRayCollisionQuad");
fn void initAudioDevice() @extern("InitAudioDevice");
fn void closeAudioDevice() @extern("CloseAudioDevice");
fn bool isAudioDeviceReady() @extern("IsAudioDeviceReady");
fn void setMasterVolume(float volume) @extern("SetMasterVolume");
fn float getMasterVolume() @extern("GetMasterVolume");
fn Wave loadWave(char *fileName) @extern("LoadWave");
fn Wave loadWaveFromMemory(char *fileType, char *fileData, int dataSize) @extern("LoadWaveFromMemory");
fn bool isWaveReady(Wave wave) @extern("IsWaveReady");
fn Sound loadSound(char *fileName) @extern("LoadSound");
fn Sound loadSoundFromWave(Wave wave) @extern("LoadSoundFromWave");
fn Sound loadSoundAlias(Sound source) @extern("LoadSoundAlias");
fn bool isSoundReady(Sound sound) @extern("IsSoundReady");
fn void updateSound(Sound sound, void *data, int sampleCount) @extern("UpdateSound");
fn void unloadWave(Wave wave) @extern("UnloadWave");
fn void unloadSound(Sound sound) @extern("UnloadSound");
fn void unloadSoundAlias(Sound alias) @extern("UnloadSoundAlias");
fn bool exportWave(Wave wave, char *fileName) @extern("ExportWave");
fn bool exportWaveAsCode(Wave wave, char *fileName) @extern("ExportWaveAsCode");
fn void playSound(Sound sound) @extern("PlaySound");
fn void stopSound(Sound sound) @extern("StopSound");
fn void pauseSound(Sound sound) @extern("PauseSound");
fn void resumeSound(Sound sound) @extern("ResumeSound");
fn bool isSoundPlaying(Sound sound) @extern("IsSoundPlaying");
fn void setSoundVolume(Sound sound, float volume) @extern("SetSoundVolume");
fn void setSoundPitch(Sound sound, float pitch) @extern("SetSoundPitch");
fn void setSoundPan(Sound sound, float pan) @extern("SetSoundPan");
fn Wave waveCopy(Wave wave) @extern("WaveCopy");
fn void waveCrop(Wave *wave, int initFrame, int finalFrame) @extern("WaveCrop");
fn void waveFormat(Wave *wave, int sampleRate, int sampleSize, int channels) @extern("WaveFormat");
fn float *loadWaveSamples(Wave wave) @extern("LoadWaveSamples");
fn void unloadWaveSamples(float *samples) @extern("UnloadWaveSamples");
fn Music loadMusicStream(char *fileName) @extern("LoadMusicStream");
fn Music loadMusicStreamFromMemory(char *fileType, char *data, int dataSize) @extern("LoadMusicStreamFromMemory");
fn bool isMusicReady(Music music) @extern("IsMusicReady");
fn void unloadMusicStream(Music music) @extern("UnloadMusicStream");
fn void playMusicStream(Music music) @extern("PlayMusicStream");
fn bool isMusicStreamPlaying(Music music) @extern("IsMusicStreamPlaying");
fn void updateMusicStream(Music music) @extern("UpdateMusicStream");
fn void stopMusicStream(Music music) @extern("StopMusicStream");
fn void pauseMusicStream(Music music) @extern("PauseMusicStream");
fn void resumeMusicStream(Music music) @extern("ResumeMusicStream");
fn void seekMusicStream(Music music, float position) @extern("SeekMusicStream");
fn void setMusicVolume(Music music, float volume) @extern("SetMusicVolume");
fn void setMusicPitch(Music music, float pitch) @extern("SetMusicPitch");
fn void setMusicPan(Music music, float pan) @extern("SetMusicPan");
fn float getMusicTimeLength(Music music) @extern("GetMusicTimeLength");
fn float getMusicTimePlayed(Music music) @extern("GetMusicTimePlayed");
fn AudioStream loadAudioStream(uint sampleRate, uint sampleSize, uint channels) @extern("LoadAudioStream");
fn bool isAudioStreamReady(AudioStream stream) @extern("IsAudioStreamReady");
fn void unloadAudioStream(AudioStream stream) @extern("UnloadAudioStream");
fn void updateAudioStream(AudioStream stream, void *data, int frameCount) @extern("UpdateAudioStream");
fn bool isAudioStreamProcessed(AudioStream stream) @extern("IsAudioStreamProcessed");
fn void playAudioStream(AudioStream stream) @extern("PlayAudioStream");
fn void pauseAudioStream(AudioStream stream) @extern("PauseAudioStream");
fn void resumeAudioStream(AudioStream stream) @extern("ResumeAudioStream");
fn bool isAudioStreamPlaying(AudioStream stream) @extern("IsAudioStreamPlaying");
fn void stopAudioStream(AudioStream stream) @extern("StopAudioStream");
fn void setAudioStreamVolume(AudioStream stream, float volume) @extern("SetAudioStreamVolume");
fn void setAudioStreamPitch(AudioStream stream, float pitch) @extern("SetAudioStreamPitch");
fn void setAudioStreamPan(AudioStream stream, float pan) @extern("SetAudioStreamPan");
fn void setAudioStreamBufferSizeDefault(int size) @extern("SetAudioStreamBufferSizeDefault");
fn void setAudioStreamCallback(AudioStream stream, AudioCallback callback) @extern("SetAudioStreamCallback");
fn void attachAudioStreamProcessor(AudioStream stream, AudioCallback processor) @extern("AttachAudioStreamProcessor");
fn void detachAudioStreamProcessor(AudioStream stream, AudioCallback processor) @extern("DetachAudioStreamProcessor");
fn void attachAudioMixedProcessor(AudioCallback processor) @extern("AttachAudioMixedProcessor");
fn void detachAudioMixedProcessor(AudioCallback processor) @extern("DetachAudioMixedProcessor");
